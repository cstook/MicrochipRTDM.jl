        - export rtdm_write, rtdm_read, rtdm_read!, isrtdmok, RTDMInterface
        - 
        - type CRC
        -   crc  :: UInt16 # running crc
        -   data :: UInt8  # input byte for bit shifting
        - end
        - 
        - const polynomial = 0xa001
        - function compute_crc(crc::CRC)
        0   for i in 1:8
        0     if ((crc.crc $ crc.data)&0x0001) == 0x0001
        0       crc.crc = (crc.crc>>>1) $ polynomial
        -     else
        0       crc.crc = crc.crc>>>1
        -     end
        0     crc.data >>>=1
        -   end
        0   return crc.crc
        - end
        - 
        - immutable RTDMInterface
        -   address :: Dict{Symbol,UInt32} # connects symbols to addresses
        -   iouart  :: IO # serial port microcontroller is connected to
        -   iopipe  :: IOBuffer # pipe to serialize data for crc and uart
        -   iopipe2 :: IOBuffer
        -   buffer1 :: Array{UInt8,1}
        -   buffer4 :: Array{UInt8,1}
        -   buffer6 :: Array{UInt8,1}
        -   buffercrc :: Array{UInt16,1}
        -   crc :: CRC
        -   function RTDMInterface(addressdict::Dict{Symbol,UInt32}, iouart::IO)
      704     new(addressdict, iouart, PipeBuffer(), PipeBuffer(),
        -       Array(UInt8,1), Array(UInt8,4), Array(UInt8,6),
        -       Array(UInt16,1), CRC(0xffff,0x00))
        -   end
        - end
        - 
        - function Base.show(io::IO, x::RTDMInterface)
        -   println(io, "Dict{Symbol,UInt32} with ",length(x.address)," entries")
        -   show(io, x.iouart)
        -   return nothing
        - end
        - 
        - 
        - function Base.close(i::RTDMInterface)
        -   close(i.iouart)
        -   close(i.iopipe)
        - end
        - 
        - function pipecrc!(i::RTDMInterface, data)
      192   write(i.iopipe,data)
        0   while ~eof(i.iopipe)
        0     i.crc.data = read(i.iopipe, UInt8)
        0     compute_crc(i.crc)
        -   end
        0   return nothing
        - end
        - 
        - function writewithcrc(i::RTDMInterface, data; computecrc = true)
        -   write(i.iouart,data)
        -   if computecrc
        -     pipecrc!(i, data)
        -   end
        -   return nothing
        - end
        - 
        - function readwithcrc{T}(i::RTDMInterface, ::Type{T}; computecrc = true)
        -   data = read(i.iouart, T)
        -   if computecrc
        -     pipecrc!(i, data)
        -   end
        -   return data
        - end
        - 
        - function readwithcrc!{T}(i::RTDMInterface, data::Array{T}; computecrc = true)
        -   read!(i.iouart, data)
        -   if computecrc
        -     pipecrc!(i, data)
        -   end
        -   return nothing
        - end
        - 
        - function resetcrc!(i::RTDMInterface)
        -   i.crc.crc = 0xffff
        -   return nothing
        - end
        - 
        - getcrc(i::RTDMInterface) = i.crc.crc
        - 
        - function checkforerrorcode(i::RTDMInterface)
        -   # errorcode = 0   no error
        -   # errorcode < 0   somthing wrong with received message. from this module.
        -   # errorcode > 0   error code returned by target.  from microcontroller.
        -   # returns errorcode and crc up to this point
        0   resetcrc!(i)
        0   errorcode = 0
        0   replycode = readwithcrc(i,UInt8)
        0   if replycode != 0x2b  # '+'
        0     readwithcrc!(i, i.buffer4)
        0     readwithcrc!(i, i.buffercrc, computecrc = false)
        0     if i.buffer4[1] != 0x24 # '$'
        0       errorcode = -1
        0     elseif i.buffer4[2] != 0x45 # 'E'
        0       errorcode = -1
        0     elseif i.buffer4[4] != 0x23 # '#'
        0       errorcode = -1
        0     elseif i.buffercrc[1] != getcrc(i)
        0       errorcode = -2
        -     else
        0       errorcode = convert(Int,i.buffer4[3])
        -     end
        -   end
        0   return errorcode
        - end
        - 
        - const communication_link_sanity_check = b"$s#"
        - const linkok = b"$RTDM#"
        - const clsc_writereplybuffer = Array(UInt8,length(linkok))
        - 
        - function isrtdmok(i::RTDMInterface; retry = 1)
        0   errorcode = -99
        0   for attempt in 1:retry
        0     resetcrc!(i)
        0     writewithcrc(i, communication_link_sanity_check)
        0     writewithcrc(i,getcrc(i), computecrc = false)
        0     errorcode = checkforerrorcode(i)
        0     if errorcode == 0
        0       readwithcrc!(i, i.buffer6)
        0       readwithcrc!(i, i.buffercrc, computecrc = false)
        0       if getcrc(i) != i.buffercrc[1] # did crc match?
        0         errorcode = -3
        -       end
        -     end
        0     if errorcode == 0 
        0       break
        -     end
        -   end
        0   return errorcode == 0
        - end
        - 
        - const startreadrequest =  b"$m"
        - const endofmessage = b"#"
        - const startreadreply =b"$"
        - function rtdm_read{T}(i::RTDMInterface, ::Type{T}, address::Integer; retry = 1)
        0   address32 = convert(UInt32,address)
        0   buffersize16 = UInt16(sizeof(T))
        0   errorcode = -99
        0   data = T(0)
        0   for attempt in 1:retry
        0     resetcrc!(i)
        -     # request read
        0     writewithcrc(i, startreadrequest)
        0     writewithcrc(i, address32)
        0     writewithcrc(i, buffersize16)
        0     writewithcrc(i, endofmessage)
        0     writewithcrc(i, getcrc(i), computecrc = false)
        -     # process reply
        0     errorcode = checkforerrorcode(i)
        0     if errorcode == 0
        0       readwithcrc!(i, i.buffer1)  # read start code
     1600       data = readwithcrc(i, T)
        0       readwithcrc!(i, i.buffer1) # read end code
        0       readwithcrc!(i, i.buffercrc, computecrc = false)
        0       if getcrc(i) != i.buffercrc[1]
        0         errorcode = -4
        -       end
        -     end
        0     if errorcode == 0 
        0       break
        -     end
        -   end
        0   checkerrorcode(errorcode,retry)
        0   return data
        - end
        - 
        - function rtdm_read!{T}(i::RTDMInterface, buffer::Array{T}, address::Integer; retry = 1)
     3200   address32 = UInt32(address)
        0   buffersize16 = UInt16(sizeof(buffer))
        0   errorcode = -99
        0   for attempt in 1:retry
        0     resetcrc!(i)
        -     # request read
        0     writewithcrc(i, startreadrequest)
        0     writewithcrc(i, address32)
        0     writewithcrc(i, buffersize16)
        0     writewithcrc(i, endofmessage)
        0     writewithcrc(i, getcrc(i), computecrc = false)
        -     # process reply
        0     errorcode = checkforerrorcode(i)
        0     if errorcode == 0
        0       readwithcrc!(i, i.buffer1)  # read start code
        0       readwithcrc!(i, buffer)
        0       readwithcrc!(i, i.buffer1) # read end code
        0       readwithcrc!(i, i.buffercrc, computecrc = false)
        0       if getcrc(i) != i.buffercrc[1]
        0         errorcode = -4
        -       end
        -     end
        0     if errorcode == 0 
        0       break
        -     end
        -   end
        0   checkerrorcode(errorcode,retry)
        0   return nothing
        - end
        - 
        - const startwrite = b"$M"
        - const endofwrite = b"#"
        - # const replyok = b"$OK#"
        - # const replyokcrc = 0x084c # rtdm_crc(b"+$OK#")
        - 
        - function rtdm_write{T}(i::RTDMInterface, buffer::Array{T}, address::Integer; retry = 1)
     3200   address32 = UInt32(address)
        0   buffersize16 = UInt16(sizeof(buffer))
        0   errorcode = -99
        0   for attempt in 1:retry
        0     resetcrc!(i)
        -     # write memory
        0     writewithcrc(i, startwrite)
        0     writewithcrc(i, address32)
        0     writewithcrc(i, buffersize16)
        0     writewithcrc(i, buffer)
        0     writewithcrc(i, endofwrite)
        0     writewithcrc(i, getcrc(i), computecrc = false)
        -     # process reply
        0     errorcode = checkforerrorcode(i)
        0     if errorcode == 0
        0       readwithcrc!(i, i.buffer4)
        0       readwithcrc!(i, i.buffercrc, computecrc = false)
        0       if getcrc(i) != i.buffercrc[1]
        0         errorcode = -5
        -       end
        -     end
        0     if errorcode != 0 
        0       break
        -     end
        -   end
        0   checkerrorcode(errorcode,retry)
        0   return nothing
        - end
        - 
        - function rtdm_write(i::RTDMInterface, data, address::Integer; retry = 1)
     6400   address32 = UInt32(address)
        0   buffersize16 = UInt16(sizeof(data))
        0   errorcode = -99
        0   for attempt in 1:retry
        0     resetcrc!(i)
        -     # write memory
        0     writewithcrc(i, startwrite)
        0     writewithcrc(i, address32)
        0     writewithcrc(i, buffersize16)
        0     writewithcrc(i, data)
        0     writewithcrc(i, endofwrite)
        0     writewithcrc(i, getcrc(i), computecrc = false)
        -     # process reply
        0     errorcode = checkforerrorcode(i)
        0     if errorcode == 0
        0       readwithcrc!(i, i.buffer4)
        0       readwithcrc!(i, i.buffercrc, computecrc = false)
        0       if getcrc(i) != i.buffercrc[1]
        0         errorcode = -5
        -       end
        -     end
        0     if errorcode != 0 
        0       break
        -     end
        -   end
        0   checkerrorcode(errorcode,retry)
        0   return nothing
        - end
        - 
        - 
        - function rtdm_write(i::RTDMInterface, data, address::Symbol; retry = 1)
     8000   rtdm_write(i, data, i.address[address]; retry = retry)
        - end
        - function rtdm_write{T}(i::RTDMInterface, buffer::Array{T}, address::Symbol; retry = 1)
     8000   rtdm_write(i, buffer, i.address[address]; retry = retry)
        - end
        - function rtdm_read!{T}(i::RTDMInterface, buffer::Array{T}, address::Symbol; retry = 1)
     8000   rtdm_read!(i, buffer, i.address[address]; retry = retry)
        - end
        - function rtdm_read{T}(i::RTDMInterface, ::Type{T}, address::Symbol; retry = 1)
        -   rtdm_read(i, T, i.address[address]; retry = retry)
        - end
        - 
